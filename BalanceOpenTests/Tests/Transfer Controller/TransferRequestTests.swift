//
//  TransferRequestTests.swift
//  BalanceOpenTests
//
//  Created by Red Davis on 22/08/2017.
//  Copyright Â© 2017 Balanced Software, Inc. All rights reserved.
//

import XCTest
@testable import BalanceOpen


internal final class TransferRequestTests: XCTestCase
{
    // Private
    private let btcAccount = BTCAccount()
    private let ethAccount = ETHAccount()
    
    // MARK: Setup
    
    override func setUp()
    {
        super.setUp()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Request type
    
    internal func testRequestType()
    {
        let exchangeTransferRequest = TransferRequest(source: self.btcAccount, recipient: self.ethAccount, amount: 1.0)
        XCTAssertEqual(exchangeTransferRequest.type, TransferRequest.RequestType.exchange)
        
        let directTransferRequest = TransferRequest(source: self.btcAccount, recipient: self.btcAccount, amount: 1.0)
        XCTAssertEqual(directTransferRequest.type, TransferRequest.RequestType.direct)
    }
    
    // MARK: Currecy types
    
    internal func testCurrencyTypes()
    {
        let transferRequest = TransferRequest(source: self.btcAccount, recipient: self.ethAccount, amount: 1.0)
        XCTAssertEqual(transferRequest.sourceCurrency, self.btcAccount.currencyType)
        XCTAssertEqual(transferRequest.recipientCurrency, self.ethAccount.currencyType)
    }
}


fileprivate final class BTCAccount: Transferable
{
    fileprivate var currencyType = Currency(rawValue: "BTC")!
    
    fileprivate var directTransferOperator: TransferOperator.Type? { return nil }
    fileprivate var exchangeTransferOperator: TransferOperator.Type? { return nil }
    
    func fetchAddress(_ completionHandler: @escaping (_ address: String?, _ error: Error?) -> Void) { }
    func make(withdrawal: Withdrawal, completionHandler: @escaping (_ success: Bool, _ error: Error?) -> Void) throws { }
}


fileprivate final class ETHAccount: Transferable
{
    fileprivate var currencyType = Currency(rawValue: "ETH")!
    
    fileprivate var directTransferOperator: TransferOperator.Type? { return nil }
    fileprivate var exchangeTransferOperator: TransferOperator.Type? { return nil }
    
    func fetchAddress(_ completionHandler: @escaping (_ address: String?, _ error: Error?) -> Void) { }
    func make(withdrawal: Withdrawal, completionHandler: @escaping (_ success: Bool, _ error: Error?) -> Void) throws { }
}
